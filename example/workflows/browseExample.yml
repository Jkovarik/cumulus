DiscoverGranulesBrowseExample:
  Comment: 'Example for Browse Generation Data Cookbook'
  StartAt: StatusReport
  TimeoutSeconds: 18000 # 5 hours
  States:
    StatusReport:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      CumulusConfig:
        cumulus_message:
          input: '{$}'
      Retry:
        - &LambdaServiceExceptionRetry
          ErrorEquals:
          - Lambda.ServiceException
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
          IntervalSeconds: 2
          MaxAttempts: 6
          BackoffRate: 2
      Next: DiscoverGranules
    DiscoverGranules:
      CumulusConfig:
        provider: '{$.meta.provider}'
        collection: '{$.meta.collection}'
        buckets: '{$.meta.buckets}'
        stack: '{$.meta.stack}'
      Type: Task
      Resource: ${DiscoverGranulesLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: QueueGranules
    QueueGranules:
      CumulusConfig:
        provider: '{$.meta.provider}'
        internalBucket: '{$.meta.buckets.internal.name}'
        stackName: '{$.meta.stack}'
        granuleIngestMessageTemplateUri: '{$.meta.templates.CookbookBrowseExample}'
        queueUrl: '{$.meta.queues.startSF}'
      Type: Task
      Resource: ${QueueGranulesLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: StopStatus
    StopStatus:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      CumulusConfig:
        sfnEnd: true
        stack: '{$.meta.stack}'
        bucket: '{$.meta.buckets.internal.name}'
        stateMachine: '{$.cumulus_meta.state_machine}'
        executionName: '{$.cumulus_meta.execution_name}'
        cumulus_message:
          input: '{$}'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'

CookbookBrowseExample:
  StartAt: Report
  States:
    Report:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      CumulusConfig:
        cumulus_message:
          input: '{$}'
      ResultPath: null
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Next: SyncGranule
    SyncGranule:
      CumulusConfig:
        buckets: '{$.meta.buckets}'
        provider: '{$.meta.provider}'
        collection: '{$.meta.collection}'
        stack: '{$.meta.stack}'
        downloadBucket: '{$.cumulus_meta.system_bucket}'
        duplicateHandling: '{$.meta.collection.duplicateHandling}'
        pdr: '{$.meta.pdr}'
        cumulus_message:
          outputs:
            - source: '{$.granules}'
              destination: '{$.meta.input_granules}'
            - source: '{$}'
              destination: '{$.payload}'
            - source: '{$.process}'
              destination: '{$.meta.process}'
      Type: Task
      Resource: ${SyncGranuleLambdaFunction.Arn}
      Retry:
          - ErrorEquals:
              - States.ALL
            IntervalSeconds: 2
            MaxAttempts: 3
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: ProcessingStep
    ProcessingStep:
      CumulusConfig:
        bucket: '{$.meta.buckets.internal.name}'
        collection: '{$.meta.collection}'
        cmrMetadataFormat: '{$.meta.cmrMetadataFormat}'
        additionalUrls: '{$.meta.additionalUrls}'
        generateFakeBrowse: true
        cumulus_message:
          outputs:
            - source: '{$.granules}'
              destination: '{$.meta.input_granules}'
            - source: '{$.files}'
              destination: '{$.payload}'
      Type: Task
      Resource: ${FakeProcessingLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Retry:
        - ErrorEquals:
            - States.ALL
          IntervalSeconds: 2
          MaxAttempts: 3
      Next: FilesToGranulesStep
    FilesToGranulesStep:
      CumulusConfig:
        inputGranules: '{$.meta.input_granules}'
        granuleIdExtraction: '{$.meta.collection.granuleIdExtraction}'
      Type: Task
      Resource: ${FilesToGranulesLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: MoveGranuleStep
    MoveGranuleStep:
      CumulusConfig:
        bucket: '{$.meta.buckets.internal.name}'
        buckets: '{$.meta.buckets}'
        distribution_endpoint: '{$.meta.distribution_endpoint}'
        collection: '{$.meta.collection}'
        duplicateHandling: '{$.meta.collection.duplicateHandling}'
      Type: Task
      Resource: ${MoveGranulesLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: CmrStep
    CmrStep:
      CumulusConfig:
        bucket: '{$.meta.buckets.internal.name}'
        stack: '{$.meta.stack}'
        cmr: '{$.meta.cmr}'
        launchpad: '{$.meta.launchpad}'
        process: '{$.meta.process}'
        input_granules: '{$.meta.input_granules}'
        granuleIdExtraction: '{$.meta.collection.granuleIdExtraction}'
      Type: Task
      Resource: ${PostToCmrLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: StopStatus
    StopStatus:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      CumulusConfig:
        sfnEnd: true
        stack: '{$.meta.stack}'
        bucket: '{$.meta.buckets.internal.name}'
        stateMachine: '{$.cumulus_meta.state_machine}'
        executionName: '{$.cumulus_meta.execution_name}'
        cumulus_message:
          input: '{$}'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'