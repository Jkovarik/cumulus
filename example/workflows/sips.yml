SyncGranule:
  Comment: 'Sync Granule'
  StartAt: Report
  States:
    Report:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        cumulus_message:
          input: '{$}'
      Retry:
        - &LambdaServiceExceptionRetry
          ErrorEquals:
          - Lambda.ServiceException
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
          IntervalSeconds: 2
          MaxAttempts: 6
          BackoffRate: 2
      Next: SyncGranule
    SyncGranule:
      Type: Task
      Resource: ${SyncGranuleLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        buckets: '{$.meta.buckets}'
        provider: '{$.meta.provider}'
        collection: '{$.meta.collection}'
        stack: '{$.meta.stack}'
        fileStagingDir: 'custom-staging-dir'
        downloadBucket: '{$.cumulus_meta.system_bucket}'
        duplicateHandling: '{$.meta.collection.duplicateHandling}'
        cumulus_message:
          outputs:
            - source: '{$.granules}'
              destination: '{$.meta.input_granules}'
            - source: '{$}'
              destination: '{$.payload}'
            - source: '{$.process}'
              destination: '{$.meta.process}'    
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: StopStatus
    StopStatus:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        sfnEnd: true
        stack: '{$.meta.stack}'
        bucket: '{$.meta.buckets.internal.name}'
        stateMachine: '{$.cumulus_meta.state_machine}'
        executionName: '{$.cumulus_meta.execution_name}'
        cumulus_message:
          input: '{$}'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'

IngestAndPublishGranule:
  Comment: 'Ingest Granule'
  StartAt: Report
  States:
    Report:
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      CumulusConfig:
        cumulus_message:
          input: '{$}'
      ResultPath: null
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Next: SyncGranule
    SyncGranule:
      Type: Task
      Resource: ${SyncGranuleLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            Path: '$.payload'
            TargetPath: '$.payload'
      CumulusConfig:
        buckets: '{$.meta.buckets}'
        provider: '{$.meta.provider}'
        collection: '{$.meta.collection}'
        stack: '{$.meta.stack}'
        downloadBucket: '{$.cumulus_meta.system_bucket}'
        duplicateHandling: '{$.meta.collection.duplicateHandling}'
        pdr: '{$.meta.pdr}'
        cumulus_message:
          outputs:
            - source: '{$.granules}'
              destination: '{$.meta.input_granules}'
            - source: '{$}'
              destination: '{$.payload}'
            - source: '{$.process}'
              destination: '{$.meta.process}'
      Retry:
          - ErrorEquals:
              - States.ALL
            IntervalSeconds: 2
            MaxAttempts: 3
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: ChooseProcess
    ChooseProcess:
      Type: Choice
      Choices:
        - Variable: $.meta.process
          StringEquals: modis
          Next: ProcessingStep
      Default: StopStatus
    ProcessingStep:
      Type: Task
      Resource: ${FakeProcessingLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        bucket: '{$.meta.buckets.internal.name}'
        collection: '{$.meta.collection}'
        cmrMetadataFormat: '{$.meta.cmrMetadataFormat}'
        additionalUrls: '{$.meta.additionalUrls}'
        cumulus_message:
          outputs:
            - source: '{$.files}'
              destination: '{$.payload}'
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Retry:
        - ErrorEquals:
            - States.ALL
          IntervalSeconds: 2
          MaxAttempts: 3
      Next: FilesToGranulesStep
    FilesToGranulesStep:
      Type: Task
      Resource: ${FilesToGranulesLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        inputGranules: '{$.meta.input_granules}'
        granuleIdExtraction: '{$.meta.collection.granuleIdExtraction}'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: MoveGranuleStep
    MoveGranuleStep:
      Type: Task
      Resource: ${MoveGranulesLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        bucket: '{$.meta.buckets.internal.name}'
        buckets: '{$.meta.buckets}'
        distribution_endpoint: '{$.meta.distribution_endpoint}'
        collection: '{$.meta.collection}'
        duplicateHandling: '{$.meta.collection.duplicateHandling}'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: CmrStep
    CmrStep:
      Type: Task
      Resource: ${PostToCmrLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        bucket: '{$.meta.buckets.internal.name}'
        stack: '{$.meta.stack}'
        cmr: '{$.meta.cmr}'
        launchpad: '{$.meta.launchpad}'
        process: '{$.meta.process}'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: StopStatus
    StopStatus:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        sfnEnd: true
        stack: '{$.meta.stack}'
        bucket: '{$.meta.buckets.internal.name}'
        stateMachine: '{$.cumulus_meta.state_machine}'
        executionName: '{$.cumulus_meta.execution_name}'
        cumulus_message:
          input: '{$}'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'

IngestGranule:
  Comment: 'Ingest Granule'
  StartAt: Report
  States:
    Report:
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      CumulusConfig:
        cumulus_message:
          input: '{$}'
      ResultPath: null
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Next: SyncGranule
    SyncGranule:
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            Path: '$.payload'
            TargetPath: '$.payload'
      CumulusConfig:
        buckets: '{$.meta.buckets}'
        provider: '{$.meta.provider}'
        collection: '{$.meta.collection}'
        stack: '{$.meta.stack}'
        downloadBucket: '{$.cumulus_meta.system_bucket}'
        duplicateHandling: '{$.meta.collection.duplicateHandling}'
        pdr: '{$.meta.pdr}'
        cumulus_message:
          outputs:
            - source: '{$.granules}'
              destination: '{$.meta.input_granules}'
            - source: '{$}'
              destination: '{$.payload}'
            - source: '{$.process}'
              destination: '{$.meta.process}'
      Type: Task
      Resource: ${SyncGranuleLambdaFunction.Arn}
      Retry:
          - ErrorEquals:
              - States.ALL
            IntervalSeconds: 2
            MaxAttempts: 3
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: ChooseProcess
    ChooseProcess:
      Type: Choice
      Choices:
        - Variable: $.meta.process
          StringEquals: modis
          Next: ProcessingStep
      Default: StopStatus
    ProcessingStep:
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        bucket: '{$.meta.buckets.internal.name}'
        collection: '{$.meta.collection}'
        cumulus_message:
          outputs:
            - source: '{$.files}'
              destination: '{$.payload}'
      Type: Task
      Resource: ${FakeProcessingLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Retry:
        - ErrorEquals:
            - States.ALL
          IntervalSeconds: 2
          MaxAttempts: 3
      Next: FilesToGranulesStep
    FilesToGranulesStep:
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        inputGranules: '{$.meta.input_granules}'
        granuleIdExtraction: '{$.meta.collection.granuleIdExtraction}'
      Type: Task
      Resource: ${FilesToGranulesLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: MoveGranuleStep
    MoveGranuleStep:
      Type: Task
      Resource: ${MoveGranulesLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        bucket: '{$.meta.buckets.internal.name}'
        buckets: '{$.meta.buckets}'
        distribution_endpoint: '{$.meta.distribution_endpoint}'
        collection: '{$.meta.collection}'
        duplicateHandling: '{$.meta.collection.duplicateHandling}'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: StopStatus
    StopStatus:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        sfnEnd: true
        stack: '{$.meta.stack}'
        bucket: '{$.meta.buckets.internal.name}'
        stateMachine: '{$.cumulus_meta.state_machine}'
        executionName: '{$.cumulus_meta.execution_name}'
        cumulus_message:
          input: '{$}'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'

PublishGranule:
  Comment: 'Publish Granule'
  StartAt: Report
  States:
    Report:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        cumulus_message:
          input: '{$}'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Next: CmrStep
    CmrStep:
      Type: Task
      Resource: ${PostToCmrLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        bucket: '{$.meta.buckets.internal.name}'
        stack: '{$.meta.stack}'
        cmr: '{$.meta.cmr}'
        launchpad: '{$.meta.launchpad}'
        process: 'N/A'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: StopStatus
    StopStatus:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        sfnEnd: true
        stack: '{$.meta.stack}'
        bucket: '{$.meta.buckets.internal.name}'
        stateMachine: '{$.cumulus_meta.state_machine}'
        executionName: '{$.cumulus_meta.execution_name}'
        cumulus_message:
          input: '{$}'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'

ParsePdr:
  Comment: 'Parse a given PDR'
  StartAt: StatusReport
  States:
    StatusReport:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      CumulusConfig:
        cumulus_message:
          input: '{$}'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Next: ParsePdr
    ParsePdr:
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        provider: '{$.meta.provider}'
        bucket: '{$.meta.buckets.internal.name}'
        stack: '{$.meta.stack}'
      Type: Task
      Resource: ${ParsePdrLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: QueueGranules
    QueueGranules:
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        provider: '{$.meta.provider}'
        internalBucket: '{$.meta.buckets.internal.name}'
        stackName: '{$.meta.stack}'
        granuleIngestMessageTemplateUri: '{$.meta.templates.IngestGranule}'
        queueUrl: '{$.meta.queues.startSF}'
      Type: Task
      Resource: ${QueueGranulesLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: CheckStatus
    CheckStatus:
      Type: Task
      Resource: ${PdrStatusCheckLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            Path: '$.payload'
            TargetPath: '$.payload'
      CumulusConfig:
        cumulus_message:
          outputs:
            - source: '{$}'
              destination: '{$.payload}'
            - source: '{$.isFinished}'
              destination: '{$.meta.isPdrFinished}'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: CheckAgainChoice
    CheckAgainChoice:
      Type: Choice
      Choices:
        - Variable: $.meta.isPdrFinished
          BooleanEquals: false
          Next: PdrStatusReport
        - Variable: $.meta.isPdrFinished
          BooleanEquals: true
          Next: StopStatus
      Default: StopStatus
    PdrStatusReport:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        cumulus_message:
          input: '{$}'
      ResultPath: null
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: WaitForSomeTime
    WaitForSomeTime:
      Type: Wait
      Seconds: 10
      Next: CheckStatus
    StopStatus:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        sfnEnd: true
        stack: '{$.meta.stack}'
        bucket: '{$.meta.buckets.internal.name}'
        stateMachine: '{$.cumulus_meta.state_machine}'
        executionName: '{$.cumulus_meta.execution_name}'
        cumulus_message:
          input: '{$}'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'

DiscoverGranules:
  Comment: 'Discovers new Granules from a given provider'
  StartAt: StatusReport
  TimeoutSeconds: 18000 # 5 hours
  States:
    StatusReport:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      CumulusConfig:
        cumulus_message:
          input: '{$}'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Next: DiscoverGranules
    DiscoverGranules:
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        provider: '{$.meta.provider}'
        collection: '{$.meta.collection}'
        buckets: '{$.meta.buckets}'
        stack: '{$.meta.stack}'
      Type: Task
      Resource: ${DiscoverGranulesLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: QueueGranules
    QueueGranules:
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        provider: '{$.meta.provider}'
        internalBucket: '{$.meta.buckets.internal.name}'
        stackName: '{$.meta.stack}'
        granuleIngestMessageTemplateUri: '{$.meta.templates.IngestGranule}'
        queueUrl: '{$.meta.queues.startSF}'
      Type: Task
      Resource: ${QueueGranulesLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: StopStatus
    StopStatus:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        sfnEnd: true
        stack: '{$.meta.stack}'
        bucket: '{$.meta.buckets.internal.name}'
        stateMachine: '{$.cumulus_meta.state_machine}'
        executionName: '{$.cumulus_meta.execution_name}'
        cumulus_message:
          input: '{$}'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'

DiscoverAndQueuePdrs:
  Comment: 'Discovers new PDRs from a given provider'
  StartAt: StartStatus
  States:
    StartStatus:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      CumulusConfig:
        cumulus_message:
          input: '{$}'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Next: DiscoverPdrs
    DiscoverPdrs:
      Type: Task
      Resource: ${DiscoverPdrsLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        stack: '{$.meta.stack}'
        provider: '{$.meta.provider}'
        bucket: '{$.meta.buckets.internal.name}'
        collection: '{$.meta.collection}'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: QueuePdrs
    QueuePdrs:
      Type: Task
      Resource: ${QueuePdrsLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        queueUrl: '{$.meta.queues.startSF}'
        parsePdrMessageTemplateUri: '{$.meta.templates.ParsePdr}'
        provider: '{$.meta.provider}'
        collection: '{$.meta.collection}'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: StopStatus
    StopStatus:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      Parameters:
        cma:
          event.$: '$'
          ReplaceConfig:
            FullMessage: true
      CumulusConfig:
        sfnEnd: true
        stack: '{$.meta.stack}'
        bucket: '{$.meta.buckets.internal.name}'
        stateMachine: '{$.cumulus_meta.state_machine}'
        executionName: '{$.cumulus_meta.execution_name}'
        cumulus_message:
          input: '{$}'
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'
